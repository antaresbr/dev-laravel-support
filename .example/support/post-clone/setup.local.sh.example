#!/bin/bash

echo ""
echo "---[ $(dirname "$(realpath "${SCRIPT_DIR}")") ]---"
echo "---| post-clone/$(basename "${BASH_SOURCE[0]}")"

[ -z "${WORKSPACE_BASE_LIB_SH}" ] && echo -e "post-clone/setup-local | ERROR | WORKSPACE_BASE_LIB_SH not defined" && exit 1
[ -z "${POST_CLONE_SETUP_LIB_SH}" ] && wsError "post-clone/setup-local" "POST_CLONE_SETUP_LIB_SH not defined"
[ -z "${POST_CLONE_LIB_SH}" ] && wsError "post-clone/setup-local" "POST_CLONE_LIB_SH not defined"

#---[ setup-local ]---

#-- parameters

pclLoadSavedParams

if [ -z "${pAppName}" ]
then
  echo ""
  envVarRead "APP name" "pAppName" "default:$(basename "$(dirname "$(realpath "${BASE_DIR}")")")|required|lower-case" ""
fi

echo ""
[ -n "${pAppEnvDir}" ]      || envVarRead "env/${pEnvironment}-env : APP_ENV_DIR" "pAppEnvDir" "" ""
[ -n "${pUrlProto}" ]       || envVarRead "env/${pEnvironment}-env : URL_PROTO" "pUrlProto" "default:http|required|lower-case|hide-values" "http|https"
[ -n "${pUrlDomain}" ]      || envVarRead "env/${pEnvironment}-env : URL_DOMAIN" "pUrlDomain" "default:${pAppName}.${pEnvironment}|required|lower-case" ""

echo ""
[ -n "${pMysqlRootUsername}" ] || envVarRead "MYSQL_ROOT_USERNAME" "pMysqlRootUsername" "default:{{DB_USERNAME}}" ""
[ -n "${pMysqlRootPassword}" ] || envVarRead "MYSQL_ROOT_PASSWORD" "pMysqlRootPassword" "default:{{DB_PASSWORD}}" ""
echo ""
[ -n "${pPgsqlRootUsername}" ] || envVarRead "PGSQL_ROOT_USERNAME" "pPgsqlRootUsername" "default:{{DB_USERNAME}}" ""
[ -n "${pPgsqlRootPassword}" ] || envVarRead "PGSQL_ROOT_PASSWORD" "pPgsqlRootPassword" "default:{{DB_PASSWORD}}" ""

[ "${pAppEnvDir}" = ":none:" ] && pAppEnvDir=""

[ -z "${PC_IGNORE_CREATE_LINKS_TO_BASE_SCRIPTS}" ] || pLinksToBaseBaseScripts=no
if [ -z "${pLinksToBaseBaseScripts}" ]
then
  echo""
  envVarRead "Create links to base scripts?" "pLinksToBaseBaseScripts" "default:yes|lower-case|hide-values" "y|yes|n|no"
fi

[ -z "${PC_IGNORE_GIT_REPO_EXAMPLE}" ] || pCopyGitRepoExample=no
if [ -z "${pCopyGitRepoExample}" ]
then
  echo""
  envVarRead "Copy <git-repo> example to parent project?" "pCopyGitRepoExample" "default:yes|lower-case|hide-values" "y|yes|n|no"
fi

[ -z "${PC_IGNORE_POST_CLONE_EXAMPLE}" ] || pCopyPostCloneExample=no
if [ -z "${pCopyPostCloneExample}" ]
then
  echo""
  envVarRead "Copy <post-clone> example to parent project?" "pCopyPostCloneExample" "default:yes|lower-case|hide-values" "y|yes|n|no"
fi

[ -z "${PC_IGNORE_DOCKER_EXAMPLE}" ] || pCopyDockerExample=no
if [ -z "${pCopyDockerExample}" ]
then
  echo""
  envVarRead "Copy <docker> example to parent project?" "pCopyDockerExample" "default:yes|lower-case|hide-values" "y|yes|n|no"
fi

[ -z "${PC_IGNORE_SAIL_EXAMPLE}" ] || pCopySailExample=no
if [ -z "${pCopySailExample}" ]
then
  echo""
  envVarRead "Copy <sail> example to parent project?" "pCopySailExample" "default:yes|lower-case|hide-values" "y|yes|n|no"
fi

echo ""
echo "---[ parameters ]---"
echo ""
echo "ENVIRONMENT : ${pEnvironment}"
echo ""
echo "pAppName    : ${pAppName}"
echo ""
echo "APP_ENV_DIR      : ${pAppEnvDir}"
echo "URL_PROTO        : ${pUrlProto}"
echo "URL_DOMAIN       : ${pUrlDomain}"
echo ""
echo "MYSQL_ROOT_USERNAME : ${pMysqlRootUsername}"
echo "MYSQL_ROOT_PASSWORD : ${pMysqlRootPassword}"
echo "PGSQL_ROOT_USERNAME : ${pPgsqlRootUsername}"
echo "PGSQL_ROOT_PASSWORD : ${pPgsqlRootPassword}"
echo ""
echo "pLinksToBaseBaseScripts : ${pLinksToBaseBaseScripts}"
echo "pCopyGitRepoExample     : ${pCopyGitRepoExample}"
echo "pCopyPostCloneExample   : ${pCopyPostCloneExample}"
echo "pCopyDockerExample      : ${pCopyDockerExample}"
echo "pCopySailExample        : ${pCopySailExample}"
echo ""

[ -n "${pConfirm}" ] || envVarRead "Confirm parameters?" "pConfirm" "default:yes|lower-case|hide-values" "y|yes|n|no"
[ "${pConfirm:0:1}" == "y" ] || exit 0

if [ ! -f "${SCRIPT_DIR}/setup.local.env" ]
then
  echo""
  envVarRead "Save post-clone params?" "pSavePostcloneParams" "default:yes|lower-case|hide-values" "y|yes|n|no"
  if [ "${pConfirm:0:1}" == "y" ]
  then
    echo "\
#!/bin/bash
pAppName=\"${pAppName}\"
pAppEnvDir=\"${pAppEnvDir:-:none:}\"
pUrlProto=\"${pUrlProto}\"
pUrlDomain=\"${pUrlDomain}\"
pMysqlRootUsername=\"${pMysqlRootUsername}\"
pMysqlRootPassword=\"${pMysqlRootPassword}\"
pPgsqlRootUsername=\"${pPgsqlRootUsername}\"
pPgsqlRootPassword=\"${pPgsqlRootPassword}\"
pLinksToBaseBaseScripts=\"${pLinksToBaseBaseScripts}\"
pCopyGitRepoExample=\"${pCopyGitRepoExample}\"
pCopyPostCloneExample=\"${pCopyPostCloneExample}\"
pCopyDockerExample=\"${pCopyDockerExample}\"
pCopySailExample=\"${pCopySailExample}\"
" > "${SCRIPT_DIR}/setup.local.env"
  fi
fi

#-- actions

function doEnvFiles() {
  wsCertifyPath "$(realpath "${BASE_DIR}/env")"

  local envFilesVars="\
APP_ENV_DIR=${pAppEnvDir}
URL_PROTO=${pUrlProto}
URL_DOMAIN=${pUrlDomain}
MYSQL_ROOT_USERNAME=${pMysqlRootUsername}
MYSQL_ROOT_PASSWORD=${pMysqlRootPassword}
PGSQL_ROOT_USERNAME=${pPgsqlRootUsername}
PGSQL_ROOT_PASSWORD=${pPgsqlRootPassword}
"
  echo "env/${pEnvironment}-env"
  wsTemplateFile "${BASE_DIR}/env/${pEnvironment}-env" "${BASE_DIR}/base/.example/support/env/env-example" "${envFilesVars}"

  echo "env/mysql-${pEnvironment}-env"
  wsTemplateFile "${BASE_DIR}/env/mysql-${pEnvironment}-env" "${BASE_DIR}/base/.example/support/env/mysql-env-example" "${envFilesVars}"

  echo "env/pgsql-${pEnvironment}-env"
  wsTemplateFile "${BASE_DIR}/env/pgsql-${pEnvironment}-env" "${BASE_DIR}/base/.example/support/env/pgsql-env-example" "${envFilesVars}"

  echo "env/.gitignore"
  wsCopyFileIfNotExists "${BASE_DIR}/base/.example/support/env/.gitignore.example" "${BASE_DIR}/env/.gitignore"
}


function doLinksToBaseBaseScripts() {
  local target=""
  target="base/scripts/db-dump.sh"            && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/db-exec-sql.sh"        && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/db-init-dbdefault.sh"  && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/db-init.sh"            && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/db-migrate.sh"         && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/db-reset-passwords.sh" && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/db-restore.sh"         && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/db-seed.sh"            && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/multienv-init-app.sh"  && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/storage-build.sh"      && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
}


function doCopyJsonExample() {
  wsCertifyPath "$(realpath "${BASE_DIR}/../.example")"
  wsCopyFileIfNotExists "${BASE_DIR}/base/.example/app/BUILD-INFO.json.example" "${BASE_DIR}/../.example/" "644"
  wsCopyFileIfNotExists "${BASE_DIR}/base/.example/app/ENVIRONMENT.json.example" "${BASE_DIR}/../.example/" "644"
}


function doCopyPostCloneExample() {
  wsCertifyPath "$(realpath "${BASE_DIR}/../post-clone")"
  wsCopyFileIfNotExists "${BASE_DIR}/base/.example/app/post-clone/setup.local.sh.example" "${BASE_DIR}/../post-clone/setup.local.sh" "644"
  wsCopyFileIfNotExists "${BASE_DIR}/base/post-clone/.gitignore" "${BASE_DIR}/../post-clone/.gitignore" "644"
  wsCopyFileIfNotExists "${BASE_DIR}/base/post-clone/setup.sh" "${BASE_DIR}/../post-clone/setup.sh" "755"
}


function doCopyGitRepoExample() {
  wsCertifyPath "$(realpath "${BASE_DIR}/../.git-repo")"
  wsCopyFileIfNotExists "${BASE_DIR}/base/.example/app/git-repo/git-repo.env.sh.example" "${BASE_DIR}/../.git-repo/git-repo.env.sh" "644"
}


function doCopyDockerExample() {
  local target="$(realpath "${BASE_DIR}/../docker")"
  if [ -d "${target}" ]
  then
    echo "  + already exists"
    return
  fi
  wsCertifyPath "${target}"
  cp -vr "${BASE_DIR}/base/.example/app/docker" "${BASE_DIR}/../"
}


function doCopySailExample() {
  local target="$(realpath "${BASE_DIR}/../sail")"
  if [ -d "${target}" ]
  then
    echo "  + already exists"
    return
  fi
  wsCertifyPath "${target}"
  cp -vr "${BASE_DIR}/base/.example/app/sail" "${BASE_DIR}/../"
}

#-- template and examples

echo ""
echo "---[ env files ]---"
doEnvFiles

echo ""
echo "---[ links to base scripts ]---"
if [ "${pConfirm:0:1}" != "y" ]
then
  echo "  + skiped"
else
  doLinksToBaseBaseScripts
fi

echo ""
echo "---[ example to parent : json ]---"
if [ -n "${PC_IGNORE_POST_CLONE_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopyPostCloneExample:0:1}" == "y" ] && doCopyJsonExample
  [ "${pCopyPostCloneExample:0:1}" == "y" ] || echo "  ! skiped"
fi

echo ""
echo "---[ example to parent : post-clone ]---"
if [ -n "${PC_IGNORE_POST_CLONE_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopyPostCloneExample:0:1}" == "y" ] && doCopyPostCloneExample
  [ "${pCopyPostCloneExample:0:1}" == "y" ] || echo "  ! skiped"
fi

echo ""
echo "---[ example to parent : git-repo ]---"
if [ -n "${PC_IGNORE_GIT_REPO_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopyGitRepoExample:0:1}" == "y" ] && doCopyGitRepoExample
  [ "${pCopyGitRepoExample:0:1}" == "y" ] || echo "  ! skiped"
fi

echo ""
echo "---[ example to parent : docker ]---"
if [ -n "${PC_IGNORE_DOCKER_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopyDockerExample:0:1}" == "y" ] && doCopyDockerExample
  [ "${pCopyDockerExample:0:1}" == "y" ] || echo "  ! skiped"
fi

echo ""
echo "---[ example to parent : sail ]---"
if [ -n "${PC_IGNORE_SAIL_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopySailExample:0:1}" == "y" ] && doCopySailExample
  [ "${pCopySailExample:0:1}" == "y" ] || echo "  ! skiped"
fi
