#!/bin/bash

[ "${BASH_SOURCE[0]}" -ef "$0" ] && echo "$(basename "$0") | ERROR: This file must be sourced" && exit 1
[ "$(type -t wsError)" == "function" ] || { echo "$(basename "$0") | ERROR: Function wsError not defined"; exit 1; }

echo ""
echo "---[ $(dirname "$(realpath "${SCRIPT_DIR}")") ]---"
echo "---| post-clone/$(basename "${BASH_SOURCE[0]}")"

[ -z "${WORKSPACE_BASE_LIB_SH}" ] && wsError "post-clone/setup-local" "WORKSPACE_BASE_LIB_SH not defined"
[ -z "${POST_CLONE_SETUP_LIB_SH}" ] && wsError "post-clone/setup-local" "POST_CLONE_SETUP_LIB_SH not defined"
[ -z "${POST_CLONE_LIB_SH}" ] && wsError "post-clone/setup-local" "POST_CLONE_LIB_SH not defined"

#---[ setup-local ]---

function localSailSetup() {
  echo "local sail setup"
}

#-- parameters

pclLoadDefaultAndSavedParams

echo ""

[ -n "${pSailProject}" ] || envVarRead "Sail project" "pSailProject" "default:$(wsCoalesce "${default_pSailProject}" "$(basename "$(realpath "${BASE_DIR}")")")|required|lower-case" ""
if [ -z "${pSailSubproject}" ]
then
  defSailSubproject="$(basename "$(realpath "${BASE_DIR}")")"
  [ "${defSailSubproject}" != "${pSailProject}" ] || defSailSubproject="full"
  envVarRead "Sail subproject" "pSailSubproject" "default:$(wsCoalesce "${default_pSailSubproject}" "${defSailSubproject}")|required|lower-case" ""
fi

[ -n "${pSailUserName}" ] || envVarRead "'sail' username" "pSailUserName" "default:$(wsCoalesce "${default_pSailUserName}" "ubuntu")|required|lower-case" ""

[ -n "${pUbuntuCodname}" ] || envVarRead "Ubuntu codename" "pUbuntuCodname" "default:$(wsCoalesce "${default_pUbuntuCodname}" "noble")|required|lower-case" ""
[ -n "${pPhpVersion}" ] || envVarRead "PHP version" "pPhpVersion" "default:$(wsCoalesce "${default_pPhpVersion}" "8.4")|required" ""
[ -n "${pNodeVersion}" ] || envVarRead "Node version" "pNodeVersion" "default:$(wsCoalesce "${default_pNodeVersion}" "22")|required" ""

[ -n "${pAppPort}" ] || envVarRead "APP port" "pAppPort" "default:$(wsCoalesce "${default_pAppPort}" "7001")|required" ""
[ -n "${pEnableAsync}" ] || envVarRead "Enable async jobs app" "pEnableAsync" "default:$(wsCoalesce "${default_pEnableAsync}" "yes")|required|lower-case|hide-values" "y|yes|n|no"

defRedisForwardPort=$(wsCoalesce "${default_pRedisForwardPort}" "$((pAppPort + 2))")
[ -n "${pEnableRedis}" ] || envVarRead "Enable REDIS" "pEnableRedis" "default:$(wsCoalesce "${default_pEnableRedis}" "yes")|required|lower-case|hide-values" "y|yes|n|no"
[ "${pEnableRedis:0:1}" == "n" ] || [ -n "${pRedisForwardPort}" ] || envVarRead "REDIS forward port" "pRedisForwardPort" "default:${defRedisForwardPort}|required"

defMemcachedForwardPort=$(wsCoalesce "${default_pMemcacedForwardPort}" "$((pAppPort + 3))")
[ -n "${pEnableMemcached}" ] || envVarRead "Enable Memcached" "pEnableMemcached" "default:$(wsCoalesce "${default_pEnableMemcached}" "yes")|required|lower-case|hide-values" "y|yes|n|no"
[ "${pEnableMemcached:0:1}" == "n" ] || [ -n "${pMemcacedForwardPort}" ] || envVarRead "Memcached forward port" "pMemcacedForwardPort" "default:${defMemcachedForwardPort}|required"

defMysqlVersion=$(wsCoalesce "${default_pMysqlVersion}" "8.0")
defMysqlRootPassword=$(wsCoalesce "${default_pMysqlRootPassword}" "secret")
defMysqlForwardPort=$(wsCoalesce "${default_pMysqlForwardPort}" "$((pAppPort + 4))")
[ -n "${pEnableMysql}" ] || envVarRead "Enable MySQL" "pEnableMysql" "default:$(wsCoalesce "${default_pEnableMysql}" "yes")|required|lower-case|hide-values" "y|yes|n|no"
if [ "${pEnableMysql:0:1}" == "y" ]
then
  [ -n "${pMysqlVersion}" ] || envVarRead "MySQL version" "pMysqlVersion" "default:${defMysqlVersion}|required"
  [ -n "${pMysqlRootPassword}" ] || envVarRead "MySQL root password" "pMysqlRootPassword" "default:${defMysqlRootPassword}|required"
  [ -n "${pMysqlForwardPort}" ] || envVarRead "MySQL forward port" "pMysqlForwardPort" "default:${defMysqlForwardPort}|required"
fi

defPgsqlVersion=$(wsCoalesce "${default_pPgsqlVersion}" "16")
defPgsqlRootUsername=$(wsCoalesce "${default_pPgsqlRootUsername}" "postgres")
defPgsqlRootPassword=$(wsCoalesce "${default_pPgsqlRootPassword}" "secret")
defPgsqlForwardPort=$(wsCoalesce "${default_pPgsqlForwardPort}" "$((pAppPort + 5))")
[ -n "${pEnablePgsql}" ] || envVarRead "Enable Postgres" "pEnablePgsql" "default:$(wsCoalesce "${default_pEnablePgsql}" "no")|required|lower-case|hide-values" "y|yes|n|no"
if [ "${pEnablePgsql:0:1}" == "y" ]
then
  [ -n "${pPgsqlVersion}" ] || envVarRead "Postgres version" "pPgsqlVersion" "default:${defPgsqlVersion}|required"
  [ -n "${pPgsqlRootUsername}" ] || envVarRead "Postgres root user" "pPgsqlRootUsername" "default:${defPgsqlRootUsername}|required"
  [ -n "${pPgsqlRootPassword}" ] || envVarRead "Postgres root password" "pPgsqlRootPassword" "default:${defPgsqlRootPassword}|required"
  [ -n "${pPgsqlForwardPort}" ] || envVarRead "Postgres forward port" "pPgsqlForwardPort" "default:${defPgsqlForwardPort}|required"
fi

defMailpitForwardPort=$(wsCoalesce "${default_pMailpitForwardPort}" "$((pAppPort + 51))")
[ -n "${pEnableMailpit}" ] || envVarRead "Enable Mailpit" "pEnableMailpit" "default:$(wsCoalesce "${default_pEnableMailpit}" "yes")|required|lower-case|hide-values" "y|yes|n|no"
[ "${pEnableMailpit:0:1}" == "n" ] || [ -n "${pMailpitForwardPort}" ] || envVarRead "Mailpit forward port" "pMailpitForwardPort" "default:${defMailpitForwardPort}|required"

echo ""
echo "---[ parameters ]---"
echo ""
echo "ENVIRONMENT : ${pEnvironment}"
echo ""
echo "pSailProject         : ${pSailProject}"
echo "pSailSubproject      : ${pSailSubproject}"
echo "pSailUserName        : ${pSailUserName}"
echo "pUbuntuCodname       : ${pUbuntuCodname}"
echo "pPhpVersion          : ${pPhpVersion}"
echo "pNodeVersion         : ${pNodeVersion}"
echo "pAppPort             : ${pAppPort}"
echo "pEnableAsync         : ${pEnableAsync}"
echo "pEnableRedis         : ${pEnableRedis}"
if [ "${pEnableRedis:0:1}" == "y" ]
then
  echo "pRedisForwardPort    : ${pRedisForwardPort}"
fi
echo "pEnableMemcached     : ${pEnableMemcached}"
if [ "${pEnableMemcached:0:1}" == "y" ]
then
  echo "pMemcacedForwardPort : ${pMemcacedForwardPort}"
fi
echo "pEnableMysql         : ${pEnableMysql}"
if [ "${pEnableMysql:0:1}" == "y" ]
then
  echo "pMysqlVersion        : ${pMysqlVersion}"
  echo "pMysqlRootPassword   : ${pMysqlRootPassword}"
  echo "pMysqlForwardPort    : ${pMysqlForwardPort}"
fi
echo "pEnablePgsql         : ${pEnablePgsql}"
if [ "${pEnablePgsql:0:1}" == "y" ]
then
  echo "pPgsqlVersion        : ${pPgsqlVersion}"
  echo "pPgsqlRootUsername   : ${pPgsqlRootUsername}"
  echo "pPgsqlRootPassword   : ${pPgsqlRootPassword}"
  echo "pPgsqlForwardPort    : ${pPgsqlForwardPort}"
fi
echo "pEnableMailpit       : ${pEnableMailpit}"
if [ "${pEnableMailpit:0:1}" == "y" ]
then
  echo "pMailpitForwardPort  : ${pMailpitForwardPort}"
fi
echo ""

[ -n "${pConfirm}" ] || envVarRead "Confirm parameters?" "pConfirm" "default:yes|lower-case|hide-values" "y|yes|n|no"
[ "${pConfirm:0:1}" == "y" ] || exit 0

if [ ! -f "${SCRIPT_DIR}/setup.local.env" ]
then
  echo""
  envVarRead "Save post-clone params?" "pSavePostcloneParams" "default:yes|lower-case|hide-values" "y|yes|n|no"
  if [ "${pConfirm:0:1}" == "y" ]
  then
    echo -n "\
#!/bin/bash
pSailProject=\"${pSailProject}\"
pSailSubproject=\"${pSailSubproject}\"
pSailUserName=\"${pSailUserName}\"
pUbuntuCodname=\"${pUbuntuCodname}\"
pPhpVersion=\"${pPhpVersion}\"
pNodeVersion=\"${pNodeVersion}\"
pAppPort=\"${pAppPort}\"
pEnableAsync=\"${pEnableAsync}\"
pEnableRedis=\"${pEnableRedis}\"
pRedisForwardPort=\"${pRedisForwardPort}\"
pEnableMemcached=\"${pEnableMemcached}\"
pMemcacedForwardPort=\"${pMemcacedForwardPort}\"
pEnableMysql=\"${pEnableMysql}\"
pMysqlVersion=\"${pMysqlVersion}\"
pMysqlRootPassword=\"${pMysqlRootPassword}\"
pMysqlForwardPort=\"${pMysqlForwardPort}\"
pEnablePgsql=\"${pEnablePgsql}\"
pPgsqlVersion=\"${pPgsqlVersion}\"
pPgsqlRootUsername=\"${pPgsqlRootUsername}\"
pPgsqlRootPassword=\"${pPgsqlRootPassword}\"
pPgsqlForwardPort=\"${pPgsqlForwardPort}\"
pEnableMailpit=\"${pEnableMailpit}\"
pMailpitForwardPort=\"${pMailpitForwardPort}\"
" > "${SCRIPT_DIR}/setup.local.env"
  fi
fi

[ "${pEnableAsync:0:1}" == "y" ] && pEnableAsync="true" || pEnableAsync="false"
[ "${pEnableRedis:0:1}" == "y" ] && pEnableRedis="true" || pEnableRedis="false"
[ "${pEnableMemcached:0:1}" == "y" ] && pEnableMemcached="true" || pEnableMemcached="false"
[ "${pEnableMysql:0:1}" == "y" ] && pEnableMysql="true" || pEnableMysql="false"
[ "${pEnablePgsql:0:1}" == "y" ] && pEnablePgsql="true" || pEnablePgsql="false"
[ "${pEnableMailpit:0:1}" == "y" ] && pEnableMailpit="true" || pEnableMailpit="false"

WS_TEMPLATE_FILE_VARS="\
SAIL_PROJECT=${pSailProject}
SAIL_SUBPROJECT=${pSailSubproject}
SAIL_USERNAME=${pSailUserName}
UBUNTU_CODENAME=${pUbuntuCodname}
PHP_VERSION=${pPhpVersion}
NODE_VERSION=${pNodeVersion}
APP_PORT=${pAppPort}
SAIL_ASYNC=${pEnableAsync}
SAIL_REDIS=${pEnableRedis}
REDIS_FORWARD_PORT=${pRedisForwardPort:-$defRedisForwardPort}
SAIL_MEMCACHED=${pEnableMemcached}
MEMCACHED_FORWARD_PORT=${pMemcacedForwardPort:-$defMemcachedForwardPort}
SAIL_MYSQL=${pEnableMysql}
MYSQL_VERSION=${pMysqlVersion:-$defMysqlVersion}
MYSQL_ROOT_PASSWORD=${pMysqlRootPassword:-$defMysqlRootPassword}
MYSQL_FORWARD_PORT=${pMysqlForwardPort:-$defMysqlForwardPort}
SAIL_PGSQL=${pEnablePgsql}
PGSQL_VERSION=${pPgsqlVersion:-$defPgsqlVersion}
PGSQL_ROOT_USERNAME=${pPgsqlRootUsername:-$defPgsqlRootUsername}
PGSQL_ROOT_PASSWORD=${pPgsqlRootPassword:-$defPgsqlRootPassword}
PGSQL_FORWARD_PORT=${pPgsqlForwardPort:-$defPgsqlForwardPort}
SAIL_MAILPIT=${pEnableMailpit}
MAILPIT_FORWARD_PORT=${pMailpitForwardPort:-$defMailpitForwardPort}
"

#-- sail

sailSetup

#-- files

wsTemplateFile "BUILD-INFO.json" ".example/BUILD-INFO.json.example"
wsTemplateFile "ENVIRONMENT.json" ".example/ENVIRONMENT.json.example"

if [ -d "storage" ]
then
  wsCertifyPath "storage/dump"
  wsCopyFileIfNotExists "support/base/.example/app/storage/dump/.gitignore.example" "storage/dump/.gitignore"
fi

#-- build

sailBuild

#-- ambiente

echo ""
echo "Environment starting up"
sail/sail up -d

echo ""
echo "Waiting container 'app'"

sailUpTries=0
sailUp=""
while [ -z "${sailUp}" ]
do
  ((sailUpTries+=1))
  echo "  + try : ${sailUpTries}"
  sailAppExec "CHECK_SUCCESS=false" curl 127.0.0.1:81 &> /dev/null
  [ $? -eq 0 ] && sailUp="TRUE" && break
  [ "${sailUpTries}" -ge 5 ] && wsError "Failure waiting for container app"
  sleep 3
done

if [ "${sailUp}" == "TRUE" ]
then
  #-- storage-build
  echo ""
  echo "storabe-build"
  sailAppExecAsRoot support/storage-build.sh --owner ${pSailUserName}

  #-- npm
  if [ -f "package.json" ] && [ ! -d "node_modules" ]
  then
    echo ""
    echo "npm install"
    sailAppExec npm install
  fi

  #-- composer
  if [ -f "composer.json" ] && [ ! -d "vendor" ]
  then
    echo ""
    echo "composer update"
    sailAppExec composer update
  fi
fi
